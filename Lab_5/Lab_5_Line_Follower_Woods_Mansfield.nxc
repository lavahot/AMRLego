#include "HTSMUX-driver.h"

#define LPORT msensor_S1_4
#define RPORT msensor_S1_1
#define SOUNDPORT IN_2
#define COLORPORT IN_3

#define LEFT OUT_C
#define RIGHT OUT_B
#define BOTH OUT_BC

#define MAXLIGHT 65
#define MINLIGHT 45
#define MAXPOWER 75
#define MINPOWER -25
#define SLOPE (MAXPOWER-MINPOWER) / (MAXLIGHT-MINLIGHT)
#define OFFSET MAXPOWER - SLOPE * MAXLIGHT

#define YELLOW 5

mutex moveMutex;
bool cheering = false;
bool seek_home = false;


// Follow the line!
task follow_line(){
  int lpower = 0;
  int rpower = 0;

  ClearScreen();

  while (SensorHTColorNum(COLORPORT) != 5 && seek_home != true){
    lpower = SLOPE * smuxSensorLegoLightNorm(LPORT) + OFFSET;
    OnFwd(LEFT, lpower);
    rpower = SLOPE * smuxSensorLegoLightNorm(RPORT) + OFFSET;
    OnFwd(RIGHT, rpower);

    ClearLine(LCD_LINE1);
    NumOut(1,LCD_LINE1,SensorHTColorNum(COLORPORT));

  }
  Off(BOTH);
}

task check_sound(){
  int sound_level = 0;
  // Don't do anything until it finds the color
  while(SensorHTColorNum(COLORPORT) != 5);

  seek_home = true;

  ClearScreen();

  while(true){
    if (Sensor(SOUNDPORT) > 60){
      cheering = true;
      OnFwdReg(BOTH, 75, OUT_REGMODE_SYNC);
    }
    else if (Sensor(SOUNDPORT) <= 60){
      cheering = false;
      OnFwd(LEFT, 75);
      OnRev(RIGHT, 75);
    }
    ClearLine(LCD_LINE1);
    NumOut(1,LCD_LINE1,Sensor(SOUNDPORT));
  }
}


task main(){
  // Configure sensor ports
  // smuxSetSensorLight(LPORT);
  // smuxSetSensorLight(RPORT);
  SetSensorLowspeed(COLORPORT);
  SetSensorSound(SOUNDPORT);
  
  SetSensorLowspeed(S1);

  if (!HTSMUXscanPorts(S1)) {
    // Scan failed, handle the error
    TextOut(0, LCD_LINE1, "Scan failed!");
    Wait(1000);
  }

  // Start all tasks
  Precedes(follow_line, check_sound);
}

#include "RFIDlib.nxc"

#define CLOSE 20
#define NEAR 10

#define RFPORT IN_3
#define LBPORT IN_4
#define RBPORT IN_1
#define COMPPORT IN_2

#define POWER 75

bool rfidFound = false;
int init_heading=0;
int lpower = 50;
int rpower = 50;
int ldist = 0;
int rdist = 0;

mutex moveMutex;

task search(){
  while(true){
    Acquire(moveMutex);

    rdist = SensorUS(RBPORT);
    ldist = SensorUS(LBPORT);
    
    rpower = 100 - 100*rdist/100;
    if(rpower < 0) rpower = 0;
    lpower = 100 - 100*ldist/100;
    if(lpower < 0) lpower = 0;
    /*
    if (SensorUS(LBPORT) <= CLOSE){
      rpower = 30;
      lpower = POWER;
    }
    else if (SensorUS(RBPORT) <= CLOSE){
      lpower = 30;
      rpower = POWER;
    }
    else{
      lpower = POWER;
      rpower = POWER;
    }
    */
    OnFwd(OUT_B, lpower);
    OnFwd(OUT_C, rpower);
    
    Release(moveMutex);
  }
}

sub bothBumpers(){
  Acquire(moveMutex);
  TextOut(1,LCD_LINE6,"Both Bumpers");
  //the robot should go backwards for half a second,
  OnRev(OUT_BC, POWER);
  Wait(100);
  // then make a larger turn (one second) either to the left or to the right.
  OnFwd(OUT_C, POWER);
  OnRev(OUT_B, POWER);
  Wait(200);
  Release(moveMutex);
}

sub leftBumper(){
  Acquire(moveMutex);
  TextOut(1,LCD_LINE6,"Left Bumper");
  //the robot should go backwards for half a second,
  OnRev(OUT_BC, POWER);
  Wait(100);
  // then turn to the right for half a second.
  OnFwd(OUT_B, POWER);
  OnRev(OUT_C, POWER);
  Wait(200);
  Release(moveMutex);
}

sub rightBumper(){
  Acquire(moveMutex);
  TextOut(1,LCD_LINE6,"Right Bumper");
  //the robot should go backwards for half a second,
  OnRev(OUT_BC, POWER);
  Wait(100);
  // then turn to the left for half a second.
  OnFwd(OUT_C, POWER);
  OnRev(OUT_B, POWER);
  Wait(200);
  Release(moveMutex);
}

task check_sensors(){
  while (true){
    // If the left touch sensor is pressed,
    if (SensorUS(LBPORT) <= NEAR){
      //Wait(50);
      //if(SensorUS(RBPORT) <= NEAR){
      //  bothBumpers();
      //}
      //else{
        leftBumper();
      //}
    } 
    // Similarly for the right sensor
    else if (SensorUS(RBPORT) <= NEAR){
      //Wait(50);
      //if(SensorUS(LBPORT) <= NEAR){
      //  bothBumpers();
      //}
      //else {
        rightBumper();
      //}
    }
  }
}

task check_heading(){
  int hoffset=0;
  while(true){
    if (rfidFound)
    {
      hoffset=180;
    }
    if (SensorUS(IN_4) <= NEAR)
    {}

  }
}

task check_tag(){
   string data = "";
   byte a[5];
  while(!rfidFound){
    // read the transponder
    GetRFIDArray(RFPORT,a,true);
    // convert data for visualization
    RFIDDataToString(a,data);
    // play an acknowledgment tone, if the transponder is near
    PlayTone(10*(a[0]+a[1]+a[2]+a[3]+a[4]),10);
    rfidFound=true;
  }
}

task main(){
  SetSensorLowspeed(LBPORT);
  SetSensorLowspeed(RBPORT);
  SetSensorLowspeed(COMPPORT);

  // set sensor port to read I2C data
  SetSensorLowspeed(RFPORT);
  // send dummy command to wake up sensor
  RFIDDummy(RFPORT);

  Precedes(search, check_tag);
}

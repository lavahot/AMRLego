#include "RFIDlib.nxc"

#define MAX 40
#define CLOSE 20
#define NEAR 10

#define RFPORT IN_3
#define LBPORT IN_4
#define RBPORT IN_1

#define POWER 75
#define MIN_POWER 10

bool rfidFound = false;
int lpower = 50;
int rpower = 50;
int ldist = 0;
int rdist = 0;
float m = ((POWER/2)-MIN_POWER)/(CLOSE-NEAR);
float b = (MIN_POWER-(NEAR*m));

mutex moveMutex;

// If sensors do not detect anything within CLOSE, move ahead
task search(){
  while(true){
    Acquire(moveMutex);
    
    OnFwd(OUT_B, POWER);
    OnFwd(OUT_C, POWER);
    
    Release(moveMutex);
  }
}

sub veerRight(){
  // Reduce power in right wheel to turn right based on left sensor distance
  lpower = POWER;
  //rpower = m*SensorUS(LBPORT)+b;
}

sub leftBumper(){
  Acquire(moveMutex);
  TextOut(1,LCD_LINE6,"Left Sensor");
  //the robot should reverse momentarily,
  OnRev(OUT_BC, POWER);
  Wait(100);
  // then turn to the right until it cannot "see" wall anymore
  while(SensorUS(LBPORT) <= NEAR){
    OnFwd(OUT_B, POWER);
    OnRev(OUT_C, POWER);
    NumOut(1,LCD_LINE7,SensorUS(LBPORT));
  }
  Release(moveMutex);
}

sub veerLeft(){
  // Reduce power in left wheel to turn left based on right sensor distance
  rpower = POWER;
  //lpower = m*SensorUS(RBPORT)+b;

}

sub rightBumper(){
  Acquire(moveMutex);
  TextOut(1,LCD_LINE6,"Right Sensor");
  //the robot should go reverse momentarily,
  OnRev(OUT_BC, POWER);
  Wait(100);
  // then turn to the left until it cannot "see" wall anymore
  while(SensorUS(RBPORT) <= NEAR){
    OnFwd(OUT_C, POWER);
    OnRev(OUT_B, POWER);
    NumOut(1,LCD_LINE7,SensorUS(RBPORT));
  }
  Release(moveMutex);
}

task check_sensors(){
  while (true){
    // If the left sensor is CLOSE or NEAR, act!
    if (SensorUS(LBPORT) <= CLOSE){
      if (SensorUS(LBPORT) <= NEAR){
        leftBumper();
      }
      veerRight();
    }
    // Similarly for the right sensor
    else if (SensorUS(RBPORT) <= CLOSE){
      if (SensorUS(RBPORT) <= NEAR){
        rightBumper();
      }
      veerLeft();
    }
  }
}

task check_tag(){
   string data = "";
   byte a[5];
  while(!rfidFound){
    // read the transponder
    GetRFIDArray(RFPORT,a,true);
    // convert data for visualization
    RFIDDataToString(a,data);
    // play an acknowledgment tone, if the transponder is near
    PlayTone(10*(a[0]+a[1]+a[2]+a[3]+a[4]),10);
    rfidFound=true;
  }
}

task main(){
  // set sensor ports to read I2C data
  SetSensorLowspeed(RFPORT);
  SetSensorLowspeed(LBPORT);
  SetSensorLowspeed(RBPORT);
  
  // send dummy command to wake up sensor
  RFIDDummy(RFPORT);

  Precedes(search, check_tag);
}

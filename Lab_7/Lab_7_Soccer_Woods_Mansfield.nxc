#define IRPORT IN_1
#define COMPASSPORT IN_4
#define BTN BTN4

#define LEFT OUT_B
#define RIGHT OUT_C
#define BOTH OUT_BC

#define TURNPWR 50 
#define POWER 50

mutex moveMutex;
int turn_power;

int home, goal, left_wall, right_wall, heading;
int ball_angle, angle_sum, angle_error;

int dir = 0;
int s[9];
int proximity =0;
int angles[] = {180, -120, -90, -60, -30, 0, 30, 60, 90, 120};

bool calibrated = false;
bool attacking = false;

int STALL_THRESHOLD = 1;

bool is_stalled()
{
    for (int i = 0; i != 3; ++i)
    {
        ResetRotationCount(LEFT);
        ResetRotationCount(RIGHT);
        Wait(100);

        const int countl = MotorRotationCount(LEFT);
        const int countr = MotorRotationCount(RIGHT);
        // NumOut(0, LCD_LINE1, countl, true);
        
        if (abs(countl) >= STALL_THRESHOLD && abs(countr) >= STALL_THRESHOLD)
        {
            return false;
        }
    }
    return true;
}

inline void readSeekerArray(byte& dir, byte& s[]) {
  byte s1,s2,s3,s4,s5;
  ReadSensorHTIRSeeker2AC(IRPORT, dir, s1,s2,s3,s4,s5);
  s[0]=s1;
  s[1]=0;
  s[2]=s2;
  s[3]=0;
  s[4]=s3;
  s[5]=0;
  s[6]=s4;
  s[7]=0;
  s[8]=s5;
}

sub go_forward(){
  Acquire(moveMutex);
  OnFwdReg(BOTH,POWER,OUT_REGMODE_SYNC);
  Release(moveMutex);
}

sub turn_left(){
  Acquire(moveMutex);
  OnFwdReg(RIGHT,turn_power,OUT_REGMODE_SPEED);
  OnFwdReg(LEFT,turn_power-abs(5-dir)*5,OUT_REGMODE_SPEED);
  // OnFwd(RIGHT,turn_power);
  // OnRev(LEFT,turn_power);
  Release(moveMutex);
}

sub turn_right(){
  Acquire(moveMutex);
  OnFwdReg(LEFT,turn_power,OUT_REGMODE_SPEED);
  OnFwdReg(RIGHT,turn_power-abs(5-dir)*5,OUT_REGMODE_SPEED);
  // OnFwd(LEFT,turn_power,OUT_REGMODE_SPEED);
  // OnRev(RIGHT,turn_power,OUT_REGMODE_SPEED);
  Release(moveMutex);
}

sub back_up(){
  Acquire(moveMutex);
  OnRevReg(BOTH, POWER, OUT_REGMODE_SPEED);
  Wait(500);
  Release(moveMutex);
}

task set_mode(){
  while(!calibrated);
  while(true){
    ClearLine(LCD_LINE1);
    ClearLine(LCD_LINE2);
    ClearLine(LCD_LINE3);
    ClearLine(LCD_LINE4);
    ClearLine(LCD_LINE5);
    if( (angle_sum < right_wall) && (angle_sum > left_wall) ){
      // Attack
      attacking = true;
      TextOut(1,LCD_LINE1,"Attacking");
    }
    
    else{
      // Defend
      attacking = true;
      TextOut(1,LCD_LINE1,"Defending");
    }
    NumOut(60,LCD_LINE2,heading);
    NumOut(60,LCD_LINE3,ball_angle);
    NumOut(60,LCD_LINE4,angle_sum);
    NumOut(60,LCD_LINE5,dir);
  }
}

task play(){
  while(!calibrated); // do nothing
  
  while(true){
  
    //turn_power = TURNPWR*abs(dir-5)*3/4;

    turn_power = TURNPWR;

    
    if(attacking){
      if(dir > 5){
        turn_right();
      }
      else if(dir < 5){
        turn_left();
      }
      else if(dir == 5){
        go_forward();
      }
    }
  
    else{
      if(heading < goal && angle_error > 5){
        turn_left();
      }
      else if(heading > goal && angle_error > 5){
        turn_right();
      }
      else if(angle_error < 5){
        go_forward();
      }
    }

    if(is_stalled()){
      back_up();
    }

  }
}

// Check sensors task - this task is responsible for calibrating the robot headings
// and check the sensors along the way
task check_sensors(){
  
  int proxhigh = 180;
  int proxlow = 50;

  ClearScreen();
  TextOut(1,LCD_LINE1,"Not Calibrated");
  while(!ButtonState(BTN));
  Wait(300);

  goal = SensorHTCompass(COMPASSPORT);
  TextOut(1,LCD_LINE2,"Goal Set...");
  NumOut(1,LCD_LINE3,goal);
  
  home = goal-180;
  left_wall = goal-90;
  right_wall = goal+90;
  if(home < 0)
    home +=360;
  if(left_wall < 0) 
    left_wall += 360;
  if(right_wall > 360) 
    right_wall -= 360;
  TextOut(1,LCD_LINE4,"Home Set.");
  NumOut(1,LCD_LINE5,home);
  TextOut(1,LCD_LINE6,"Ready to begin...");

  while(!ButtonState(BTN));
  ClearScreen();
  calibrated = true;

  while(true){
    readSeekerArray(dir, s);
    ball_angle = angles[dir];

    proximity=ArrayMax(s,NA,NA);
    if (proximity < proxlow)
      proximity = proxlow;
    if (proximity > proxhigh)
      proximity = proxhigh;

    heading = SensorHTCompass(COMPASSPORT);
    angle_error = abs(home-heading);
    angle_sum = heading + ball_angle;
    
    if(angle_sum < 360) angle_sum += 360;
    if(angle_sum > 360) angle_sum -= 360;
    
  }
}

task main(){
  // Configure sensor ports
  SetSensorLowspeed(IRPORT);
  SetSensorLowspeed(COMPASSPORT);
  
  // Start all tasks
  Precedes(check_sensors,set_mode,play);
}

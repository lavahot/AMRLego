#include "RFIDlib.nxc"

#define CLOSE 30
#define NEAR 15

#define RFPORT IN_3
#define LBPORT IN_4
#define RBPORT IN_1
#define CPORT IN_2

#define LEFT OUT_C
#define RIGHT OUT_B
#define BOTH OUT_BC

#define POWER 100

#define TIME 60

mutex moveMutex;
mutex dispMutex;
bool timeup = false;
int score = 0;

sub spin(){
  OnFwd(LEFT,50);
  OnRev(RIGHT,50);
  Wait(500);
}

// If sensors do not detect anything within CLOSE, move ahead
task search(){
  while(!timeup){
    Acquire(moveMutex);
    //spin();
    OnFwdReg(BOTH, POWER, OUT_REGMODE_SYNC);
    Release(moveMutex);
    //Wait(5000);
  }
}

task goHome(){
  int color=0;
  while(color != 0){
    color=SensorHTColorNum(S2);
    //ResetScreen();
    TextOut(1,LCD_LINE1,"TIME UP!!");
    NumOut(1,LCD_LINE6,color);
    //add scoring here
  }
  //StopAllTasks();
}

sub leftBumper(){
  //ResetScreen();
  //TextOut(1,LCD_LINE6,"Left Near");
  
  //the robot should reverse momentarily,
  // then turn to the right until it cannot "see" wall anymore
  while(SensorUS(LBPORT) <= NEAR){
    OnRev(BOTH, POWER/2);
    Wait(100);
    OnFwd(LEFT, POWER/2);
    OnRev(RIGHT, POWER/2);
    //NumOut(1,LCD_LINE7,SensorUS(LBPORT));
    Wait(100);
  }
}

sub veerRight(){
  // Reduce power in right wheel to turn right
  //ResetScreen();
  //TextOut(1,LCD_LINE6,"Left Close");
  //NumOut(1,LCD_LINE7,SensorUS(LBPORT));

  while(SensorUS(LBPORT) <= CLOSE){
    if(SensorUS(LBPORT) <= NEAR) leftBumper();
    else OnFwd(RIGHT, POWER/2);
  }
}

sub rightBumper(){
  ResetScreen();
  //TextOut(1,LCD_LINE6,"Right Near");
  //the robot should go reverse momentarily,
  // then turn to the left until it cannot "see" wall anymore
  while(SensorUS(RBPORT) <= NEAR){
  OnRev(BOTH, POWER/2);
  Wait(100);
    OnFwd(RIGHT, POWER/2);
    OnRev(LEFT, POWER/2);
    //NumOut(1,LCD_LINE7,SensorUS(RBPORT));
    Wait(100);
  }
}

sub veerLeft(){
  // Reduce power in left wheel to turn left
  //ResetScreen();
  //TextOut(1,LCD_LINE6,"Right Close");
  //NumOut(1,LCD_LINE7,SensorUS(RBPORT));

  while(SensorUS(RBPORT) <= CLOSE) {
    if(SensorUS(RBPORT) <= NEAR) rightBumper();
    else OnFwd(LEFT, POWER/2);
  }
}

task check_sensors(){
  while (true){
    // If the left sensor is CLOSE or NEAR, act!
    if (SensorUS(LBPORT) <= CLOSE) {
      Acquire(moveMutex);
      if (SensorUS(LBPORT) <= NEAR){
       leftBumper();
      }
      else{
       veerRight();
      }
      Release(moveMutex);
    }

    // Similarly for the right sensor
    else if (SensorUS(RBPORT) <= CLOSE) {
      Acquire(moveMutex);
      if (SensorUS(RBPORT) <= NEAR) rightBumper();
      else veerLeft();
      Release(moveMutex);
    }
  }
}

task check_tag(){
  byte a[5];
  while(!timeup){
    GetRFIDArray(RFPORT,a,true);
    // Print and sound tone
    ClearLine(LCD_LINE1);
    ClearLine(LCD_LINE2);
    ClearLine(LCD_LINE3);
    ClearLine(LCD_LINE4);
    ClearLine(LCD_LINE5);
    NumOut(0,LCD_LINE1,a[0] );
    NumOut(0,LCD_LINE2,a[1] );
    NumOut(0,LCD_LINE3,a[2] );
    NumOut(0,LCD_LINE4,a[3] );
    NumOut(0,LCD_LINE5,a[4] );
    PlayTone(10*(a[0]+a[1]+a[2]+a[3]+a[4]),1000);
    //add scoring here
  }
}

task check_color(){
  int color=0;
  while(!timeup){
    color=SensorHTColorNum(S2);
    ClearLine(LCD_LINE6);
    NumOut(1,LCD_LINE6,color);
    if (color <12){
       PlayTone(100*color,1000);
    }
    //add scoring here
  }
}

task timer(){
  Precedes(goHome);
  Wait(TIME * 1000);
  timeup=true;
  //StopTask search;
  //StopTask(check_tag);
  //StopTask(check_color);
}

task main(){
  // set sensor ports to read I2C data
  SetSensorLowspeed(RFPORT);
  SetSensorLowspeed(LBPORT);
  SetSensorLowspeed(RBPORT);
  SetSensorLowspeed(CPORT);
  
  // send dummy command to wake up sensor
  RFIDDummy(RFPORT);
  Precedes(search, check_sensors, check_tag, check_color, timer);
}
